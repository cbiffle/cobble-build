# -*- python -*- vim:syntax=python:
# The BUILD.conf file controls the rest of Cobble's actions in a project.
# The presence of this file marks the "project root," the top level directory
# beneath which we'll load files and stuff.

# Out of the box, Cobble has support for zero languages or compiler types.
# It ships with optional support for what we call the "C Production Model,"
# which works for several popular languages from the 1970s, and a few others
# that were designed to be compatible with the 1970s.  New production models are
# loaded as Python modules.
import cobble.target.c    # Tell Python about the module
install(cobble.target.c)  # Tell Cobble about the module

# Cobble will not wander all over your hard disk looking for things to build.
# You must direct it by naming at least one package in the build DAG.  This is
# called "seeding."  The 'seed' operation can take many arguments, if you have
# a complex build.  You *could* use glob/walk code to feed it the contents of
# your filesystem, but this will make rebuilds less reliable, because if you
# add a new directory, Cobble may not notice it!
seed('//foo')   # // paths are relative to the project root

# Cobble builds software in 'environments,' which are immutable key-value
# stores.  Initially the environment contains a single key, 'ROOT', pointing
# to the project root path.  Let's create a more useful environment for
# building a little C program using GCC.  We'll call it 'default', though
# this name is not special -- we could have called it 'Fred Rogers.'
environment('default', contents = {
  # The C Production Model plugin uses traditional Unix/Make variable names
  # for finding compilers and tools, though we use them in lower case.
  # Cobble will not guess which compiler you want -- you must provide these.
  # (Noticing a theme?)
  'cc': 'gcc',
  'cxx': 'g++',
  'ar': 'ar',
  'ranlib': 'ranlib',

  # The C Production Model will apply c_flags to all compiler invocations for
  # C (not C++ or D or Fortran or...) object files.
  'c_flags': [
    # Use string interpolation to insert the value of a key in the surrounding
    # environment -- here, ROOT.  This way our little demo program can find its
    # include files.
    '-I %(ROOT)s',
    # Try to make this the FASTEST HELLO WORLD EVER OMG
    '-O3', '-fomit-frame-pointer',
  ],
})

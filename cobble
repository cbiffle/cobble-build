#!/usr/bin/env python3

"""This is the command-line entry point to Cobble, which parses arguments and
orchestrates actions within the library.
"""

import argparse
import os
import shutil
import subprocess
import sys
import traceback
import re

def _compat_add_subparser(parser, title, dest):
    """Python made an incompatible change to how subparsers work between 3.6
    and 3.7. In 3.7, you must pass the 'required' argument, or the default help
    message will suck. In 3.6, this argument is rejected as illegal. Wheeeeee.

    This function provides a compatibility shim.
    """
    if sys.version_info >= (3,7):
        return parser.add_subparsers(title = title, dest = dest, required = True)
    else:
        return parser.add_subparsers(title = title, dest = dest)

def make_argument_parser():
    """Defines the grammar for command-line arguments."""

    parser = argparse.ArgumentParser()

    subparsers = _compat_add_subparser(parser, title = 'command', dest = 'command')

    init_parser = subparsers.add_parser('init',
            help = 'Initialize a build directory')
    init_parser.add_argument('project',
            help = 'Path to project root (containing BUILD.conf)')
    init_parser.add_argument('--reinit',
            help = 'Allow overwriting build.ninja (default: no)',
            action = 'store_true')
    init_parser.add_argument('--dump-environments',
            help = 'Record contents of environments in Ninja file (default: no)',
            action = 'store_true')
    init_parser.set_defaults(go = init_build_dir)

    list_parser = subparsers.add_parser('list',
            help = 'List available build targets')
    list_parser.add_argument('-v',
            help = "verbose output: print all targets, not just the symlinks",
            action = 'store_true',
            dest = 'verbose')
    list_parser.set_defaults(go = list_targets)

    build_parser = subparsers.add_parser('build',
            help = 'Run the build, regenerating files if needed.')
    build_parser.add_argument('-j',
            help = 'run N jobs in parallel',
            type = int,
            metavar = 'N',
            dest = 'jobs')
    build_parser.add_argument('-l',
            help = "don't start new jobs if loadavg > N",
            type = float,
            metavar = 'N',
            dest = 'loadavg')
    build_parser.add_argument('-n',
            help = "dry run (don't run commands)",
            action = 'store_true',
            dest = 'dry_run')
    build_parser.add_argument('-v',
            help = "verbose output: print command lines while building",
            action = 'store_true',
            dest = 'verbose')
    build_parser.add_argument('--explain',
            help = "have Ninja explain why commands are being run",
            action = 'store_true')
    build_parser.add_argument('--stats',
            help = "print Ninja internal stats at end of build",
            action = 'store_true')
    build_parser.add_argument('targets',
            nargs = '*',
            help = "Names of targets to build; if omitted, build all")
    build_parser.set_defaults(go = build)

    run_parser = subparsers.add_parser('run',
            help = 'Run concrete targets matching the given ident query.')
    run_parser.add_argument('-j',
            help = 'run N build jobs in parallel',
            type = int,
            metavar = 'N',
            dest = 'jobs')
    run_parser.add_argument('-l',
            help = "don't start new build jobs if loadavg > N",
            type = float,
            metavar = 'N',
            dest = 'loadavg')
    run_parser.add_argument('-v',
            help = "verbose output: print command lines while building and running",
            action = 'store_true',
            dest = 'verbose')
    run_parser.add_argument('query',
            help = "Query of products to build and run")
    run_parser.set_defaults(go = run)

    clean_parser = subparsers.add_parser('clean',
            help = 'Clean up build artifacts')
    clean_parser.add_argument('--squeaky',
            help = "remove all project files, leaving the build dir squeaky clean",
            action = 'store_true')
    clean_parser.set_defaults(go = clean)

    return parser

def _print_build_error(e):
    ex_type, ex, tb = e.exc_info
    print('Error evaluating', e.kind, os.path.relpath(e.path, '.'),
            ':', ex,
            file = sys.stderr)
    print('Build directory cannot be initialized', file=sys.stderr)
    print(file=sys.stderr)
    traceback.print_exception(ex_type, ex, tb, limit = -e.limit)

    if ex_type is ImportError:
        print('Help: Python `import` is not available in this context.',
                file=sys.stderr)
        if e.kind.find('BUILD.conf') >= 0:
            print('Help: Use `install` to install plugins.', file=sys.stderr)
        else:
            print('Help: Plugins must be registered in BUILD.conf.',
                    file=sys.stderr)

    if ex_type is NameError:
        print('Help: perhaps you are missing a plugin?', file=sys.stderr)

def _print_evaluation_error(e):
    tgt, env = e.targets[0]
    if env is None:
        print('Target evaluation failed in', tgt.ident, file=sys.stderr)
    else:
        print('Target evaluation failed in', tgt.ident, '@', env.digest,
                file=sys.stderr)
    print('--- message ---', file = sys.stderr)
    print(*e.cause.args, file=sys.stderr)
    print('--- outer environment ---', file=sys.stderr)
    if env is not None:
        for k in env: print(k, '=', env[k], file=sys.stderr)
    else:
        print(env, file=sys.stderr)
    print('--- dependency chain ---', file=sys.stderr)
    for dt, de in e.targets[1:]:
        if de is None:
            print(' required by', dt.ident, file=sys.stderr)
        else:
            print(' required by', dt.ident, '@', env.digest, file=sys.stderr)

def init_build_dir(args):
    """Implementation of the `init` subcommand."""

    if os.path.samefile(args.project, '.'):
        print("I won't use your project directory as build directory.",
                file = sys.stderr)
        sys.exit(1)

    if not os.path.isdir(args.project):
        print('Project dir missing or invalid: %s' % args.project,
                file = sys.stderr)
        sys.exit(1)

    if os.path.exists('build.ninja') and not args.reinit:
        print("I won't overwrite build.ninja (use --reinit to force)",
                file = sys.stderr)
        sys.exit(1)

    # Actual work

    script_path = args.script_path
    # Follow links to find where this *actually* lives.
    # As of this writing, os.path.realpath is broken.
    while os.path.islink(script_path):
        link = os.readlink(script_path)
        if os.path.isabs(link):
            script_path = link
        else:
            script_path = os.path.join(os.path.dirname(script_path), link)

    script_path = os.path.relpath(script_path, '.')

    # Create a symlink in the build directory to our true location.
    if os.path.exists('./cobble'):
        if os.path.islink('./cobble'):
            # We'll assume it's ours to mess with...
            os.remove('./cobble')
        else:
            raise Exception("can't create cobble symlink in build dir: file exists")

    os.symlink(script_path, './cobble')

    # Build the graph...
    try:
        project = cobble.loader.load(args.project, '.')
    except cobble.loader.BuildError as e:
        _print_build_error(e)
        return 1

    # ...and blow it out.
    try:
        cobble.output.write_ninja_files(project,
                dump_environments = args.dump_environments)
    except cobble.target.EvaluationError as e:
        _print_evaluation_error(e)
        return 1

    # Record the Project path as entry point for other commands.
    if os.path.exists('./project_path'):
        with open('./project_path') as project_path_file:
            if project_path_file.read().strip() != project.root:
                raise Exception("can't create project path file: file exists")

    with open('./project_path', 'w') as project_path_file:
        print(project.root, file=project_path_file)

    return 0

def _load_project():
    if not os.path.exists('./project_path'):
        print('No project path file found.', file=sys.stderr)
        print("Help: Initalize the build directory using 'init' command.",
                file=sys.stderr)
        return None

    project_path = None
    with open('./project_path') as project_path_file:
        project_path = project_path_file.read().strip()

        if not os.path.exists(project_path):
            print('Path %s found in ./project_path does not exist.' % project_path,
                    file=sys.stderr)
            return None

    try:
        return cobble.loader.load(project_path, '.')
    except cobble.loader.BuildError as e:
        _print_build_error(e)

def list_targets(args):
    """Implementation of the `list` subcommand."""
    project = _load_project()

    if project is None:
        return 1

    # The following is a somewhat crude method of gathering all concrete
    # outputs, but it seems to work. We may need to beef this up with something
    # that resembles what is done in output.py.
    products = set([])
    try:
        for target in project.concrete_targets():
            _, product_map = target.evaluate(None)
            for product in product_map.values():
                products.update(product)
    except cobble.target.EvaluationError as e:
        _print_evaluation_error(e)
        return 1

    symlinks = []
    outputs = []
    for product in products:
        symlinks.extend([
            # Normalize the paths, primarily to strip the leading ./
            (os.path.normpath(link), os.path.normpath(source))
            for (link, source) in product.symlinks()])

        if args.verbose:
            outputs.extend(
                map(os.path.normpath,
                    product.exposed_outputs().values()))

    if args.verbose:
        outputs.sort()
        for output in outputs:
            print(output)

    symlinks.sort()
    for symlink in symlinks:
        if args.verbose:
            print("%s -> %s" % symlink)
        else:
            link, _ = symlink
            print(link)

    return 0

def run(args):
    project = _load_project()

    if project is None:
        return 1

    # Collect a dict containing (ident#output_name, output_path) pairs. This set
    # can then be filtered to find the targets and outputs requested.
    #
    # The following is a somewhat crude method of gathering all concrete
    # outputs, but it seems to work. We may need to beef this up with something
    # that resembles what is done in output.py.
    outputs = dict()
    try:
        for target in project.concrete_targets():
            _, product_map = target.evaluate(None)
            for products in product_map.values():
                for product in products:
                    for output_name, path in product.exposed_outputs().items():
                        ident = '{}#{}'.format(target.ident, output_name)
                        assert ident not in outputs
                        outputs[ident] = os.path.normpath(path)
    except cobble.target.EvaluationError as e:
        _print_evaluation_error(e)
        return 1

    query = re.compile(args.query)
    results = dict(filter(lambda i: query.fullmatch(i[0]), outputs.items()))

    if args.verbose:
        for ident, path in sorted(results.items()):
            print(f"{ident} -> {path}")

    # Build the matched outputs
    if len(results) > 0:
        build_cmd = ['ninja']
        if args.jobs: cmd += ['-j', str(args.jobs)]
        if args.loadavg: cmd += ['-l', str(args.loadavg)]
        if args.verbose: build_cmd.append('-v')
        build_cmd += results.values()
        try:
            subprocess.check_call(build_cmd)
        except subprocess.CalledProcessError:
            return 1

        # Run the resulting ouputs in a shell.
        try:
            for output in sorted(results.values()):
                print("Running", output)
                subprocess.check_call([output], shell = True)
        except subprocess.CalledProcessError:
            return 1

    return 0


def build(args):
    """Implementation of the `build` subcommand."""

    cmd = ['ninja']
    if args.jobs: cmd += ['-j', str(args.jobs)]
    if args.loadavg: cmd += ['-l', str(args.loadavg)]
    if args.dry_run: cmd += ['-n']
    if args.verbose: cmd += ['-v']
    if args.explain: cmd += ['-d', 'explain']
    if args.stats: cmd += ['-d', 'stats']
    cmd += args.targets
    return subprocess.call(cmd)

_outputs_dirs = ['latest', 'env']
_project_files = ['.ninja_deps', '.ninja_log', 'build.ninja', 'project_path']

def clean(args):
    for path in _outputs_dirs:
        if os.path.isdir(path):
            shutil.rmtree(path)

    if args.squeaky:
        for path in _project_files:
            if os.path.exists(path):
                os.remove(path)

    return 0

# Find the directory housing this script.
dist_dir = os.path.dirname(os.path.realpath(__file__))
# Add the `src` and `vnd/toml` subdirs for imports.
sys.path.append(os.path.join(dist_dir, 'src'))
sys.path.append(os.path.join(dist_dir, 'vnd', 'toml'))

# Now that we have the module path right, we can...
import cobble.loader
import cobble.output
import cobble.target
import cobble.project

args = make_argument_parser().parse_args()
args.script_path = __file__
sys.exit(args.go(args))
